面向对象概念 {
    程序设计(思想):
        程序 = 数据结构 + 算法
        面向问题
        面向过程    算法优化
        面向对象    数据优化
            对象: 现实当中的事物(有形/无形)
            静态特征(性质、外观、属性等)  -- 属性(变量)
            动态特征(功能、行为)          -- 方法(函数)

    OO      面向对象
    OOA     面向对象分析
    OOD     面向对象设计
    OOP     面向对象语言(编程)

    类
        相同性质/相同行为对象的集合(类别 分类)
        类为对象的模板, 对象是类的实例化
        在Java中类为自定义数据类型, 对象为自定义类型定义的变量
        类不能直接使用, 必须通过实例化对象才能使用

    面向对象的四大特征:
        抽象
            数据抽象/过程抽象
        封装
            信息隐藏的过程(有选择的隐藏)
            防止意外导致数据破坏
            更易于隔离和修复错误
        继承
            提高开发效率
            增强程序代码可复用性
            降低程序产生错误的可能性
            为程序扩展提供便利
        多态
            一个接口，多种方法
            同名方法做不同功能
            同一个消息或同一个调用，在不同场合不同的情况下执行不同的行为
            Java中多态的表现形式: 方法重载(静态多态)/成员覆盖(动态多态)
}

类的声明/定义
    Java以类为单元，一切皆于对象
    类的声明即是创建新的数据类型

    格式:
        class 类名 {
            数据类型名 属性名;
            数据类型名 属性名 = 初始值;
            ....

            返回数据类型 方法名(参数列表...) {
                方法主体代码...
                return 表达式;  //如果不需要返回数据类型, 使用void
            }
        }

        注意事项:
            类名必须首字母大小
            一个文件当中只能有一个public修饰的类, 可以有多个非public修饰的类
            public修饰的类必须与文件名相同
            如果想要被外部文件调用必须使用public修饰
            一个文件对应一个类

对象的创建(类的实例化)
    类名 对象名 = new 类名();

对象的属性
    类里定义的变量
    对象名.属性名
    对象名.属性名 = 新值;

对象的方法
    类里定义的函数
    对象名.方法(实参列表...);

封装
    将对象的属性或方法隐藏起来
    该隐藏对其隐藏，该暴露的对其暴露
    封装原则: 隐藏属性，暴露方法(一般情况)

    属性封装:
        private 数据类型名 属性名 = 初始值;

    方法封装:
        private 返回数据类型名 方法名(...) {}

类的内部访问
    默认为直接访问或调用
    当参数或访问内的变量与属性重名, 可使用this来访问内部属性和方法
    this为调用对象的引用

构造方法
    与类名同名的方法
    没有返回值
    实例化对象时自动调用
    如果没有构造方法,Java会自动追加一个空方法
    可以通过this来调用其它构造方法

对象比较
    ==操作符
        针对引用类型对比的是引用地址
        针对基本数据类型对比是值

    重写equals方法
        public boolean equals(本类名 obj) {
            return false;
        }

===============================================================================
作业:
    实现int型数组操作类(反转 随机 最大值 最小值 左移 右移 排序 输出)
        IntArray

    实现MyString类
        CharArray
            赋值 连接 查找 比较 长度 截取

    实现指定个数的弹球(球与球碰撞反弹)

