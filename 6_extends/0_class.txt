单例模式 (设计模式之一)
    单例模式保证类的实例化只有一个
        不能被外部实例化(构造方法私有化)
        支持内部实例化(静态方法返回实例化的对象)
        不能重复内部实例化(静态属性保存实例化的引用)

继承  -> 扩展
    减小代码冗余, 提高开发效率
    提高代码维护性
    易于扩展
    java使用extends关键词来实现继承
    继承后子类具有父类公有数据及方法的访问权限(直接访问)
    父类使用private修饰的属性或方法不允许子类继承
    子类可以重写(覆盖)父类的可继承属性和方法
    在子类与父类同名情况可使用super关键词访问父数可继承数据
    构造子类时会自动调用父类的无参构造方法, 如果想要父类有参构造方法使用super来调用
    Java可以层次继承，不可以多继承(使用接口模拟多继承)

Object类
    所有类的基类(父类), 没有继承此类, java编译自动给此类继承Object类
    finalize        处理不能被垃圾回收机制回收空间的情况
        当空间不是new出来的，需要重写finalize方法来销毁
    对象的销毁
        对象名 = null;
            垃圾回收机制里自动来回收此对象的内存空间, 不是立即回收
        强制触发垃圾回收机制: System.gc();
        new  操作符/运算符


类里权限修饰符
    public      公有    可以被外部访问
    private     私有    不可以被外部访问也不可继承
    protected   保护    不允许包外访问，可以继承

包
    为了组织代码, 为了解决合并代码重名问题
    如果在代码中没有设置包, javac会自动创建包

    创建包:
        必须写上代码文件第一行
        格式: package 包名;
            包名, 可以使用点来分隔级别, 分隔层次, 包名对应目录名
            例: package kyo;
                javac -d . 类名.java    //编译时生成包对应目录架构
                java kyo.类名

    导入包
        import 包名;
            例:
                import kyo.类名;  //导入指定类(本文件当中就不能再使用此类名定义新类)
                import kyo.*;     //导入kyo包所有类

-------------------------------------------------------------------------------
包装类
    Integer Boolean Float Double Character Byte Short Long

    Integer类
        int的包装类
        int转为Integer对象   装箱
        Integer对象转为int   拆箱

        构造函数: Integer(int number)

字符串

